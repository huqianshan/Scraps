{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "import os\n",
    "import random\n",
    "import time\n",
    "import urllib\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "# 基金实时信息：http://fundgz.1234567.com.cn/js/001186.js?rt=1463558676006\n",
    "#\n",
    "# 其中001186为基金代号\n",
    "#\n",
    "# 返回值：jsonpgz({\"fundcode\":\"001186\",\"name\":\"富国文体健康股票\",\"jzrq\":\"2016-05-17\",\"dwjz\":\"0.7420\",\"gsz\":\"0.7251\",\"gszzl\":\"-2.28\",\"gztime\":\"2016-05-18 15:00\"});\n",
    "#\n",
    "# 基金详细信息：http://fund.eastmoney.com/pingzhongdata/001186.js?v=20160518155842\n",
    "#\n",
    "#\n",
    "#\n",
    "# http://fund.eastmoney.com/js/fundcode_search.js\n",
    "#\n",
    "# 单个基金查询接口\n",
    "#\n",
    "#\n",
    "# http://fund.eastmoney.com/js/jjjz_gs.js?dt=1463791574015\n",
    "#\n",
    "# 所有基金公司名称列表代码\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def get_user_agent():\n",
    "    user_agent = [\n",
    "        \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50\",\n",
    "        \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50\",\n",
    "        \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0\",\n",
    "        \"Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3; rv:11.0) like Gecko\",\n",
    "        \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\",\n",
    "        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\",\n",
    "        \"Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\",\n",
    "        \"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11\",\n",
    "        \"Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11\",\n",
    "        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)\",\n",
    "        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\",\n",
    "    ]\n",
    "    return random.choice(user_agent)\n",
    "\n",
    "\n",
    "def save_txt(name, ans):\n",
    "    name = \".\\\\data\\\\\" + name\n",
    "    with open(name, \"a+\") as fd:\n",
    "        for line in ans:\n",
    "            for word in line:\n",
    "                fd.write(word)\n",
    "                fd.write(\"  \")\n",
    "            fd.write(\"\\n\")\n",
    "    # print(\"save {} done\".format(name))\n",
    "\n",
    "\n",
    "def url_info(src, subsrc):\n",
    "    index = src.index(subsrc) + len(subsrc)\n",
    "    sym = \",\"\n",
    "    \n",
    "    if subsrc == \"curpage:\":\n",
    "        sym = \"}\"\n",
    "        # get name\n",
    "    elif subsrc == '\"name\":\"':\n",
    "        sym = '\"'\n",
    "    elif subsrc == 'gztime':\n",
    "        sym='\"'\n",
    "        \n",
    "    end = src.index(sym, index)\n",
    "    dest_src = src[index:end]\n",
    "    return dest_src\n",
    "\n",
    "\n",
    "def get_value(soup):\n",
    "    t_body = soup.tbody\n",
    "    ans = []\n",
    "    for tr in t_body:\n",
    "        i = 0\n",
    "        tem = []\n",
    "        for td in tr:\n",
    "            if td.contents:\n",
    "                tem.append(td.contents[0])\n",
    "            i += 1\n",
    "            if i > 3:\n",
    "                break\n",
    "        ans.append(tem)\n",
    "    return ans\n",
    "\n",
    "\n",
    "def get_info(text):\n",
    "    ans = []\n",
    "    ans.append(url_info(text, \"records:\"))\n",
    "    ans.append(url_info(text, \"pages:\"))\n",
    "    ans.append(url_info(text, \"curpage:\"))\n",
    "    return ans\n",
    "\n",
    "\n",
    "def fun_main(Code_num, Page_num=50, Per_num=30):\n",
    "    prefix = \"http://fund.eastmoney.com/f10/F10DataApi.aspx?type=lsjz&\"\n",
    "    code = \"code=\" + Code_num\n",
    "    per = \"&per=\" + str(Per_num)\n",
    "    ans = []\n",
    "\n",
    "    fund = prefix + code + per\n",
    "    headers = {\"User-Agent\": get_user_agent()}\n",
    "    ir = requests.get(fund, headers=headers)\n",
    "    para = get_info(ir.text)\n",
    "    [records, Page_num, curPage] = [int(i) for i in para]\n",
    "    print(\"fund {} has {} records {} page\".format(Code_num, records, Page_num))\n",
    "\n",
    "    for i in range(1, Page_num + 1):\n",
    "        page = \"&page=\" + str(i)\n",
    "        # suffix=\"&sdate=&edate=&rt=\"+str(random.uniform(0,1))\n",
    "        fund = prefix + code + per + page\n",
    "\n",
    "        try:\n",
    "            headers = {\"User-Agent\": get_user_agent()}\n",
    "            ir = requests.get(fund, headers=headers)\n",
    "            # print(ir.text)\n",
    "            ir.raise_for_status()\n",
    "        except Exception as e:\n",
    "            print(e)\n",
    "        else:\n",
    "            soup = BeautifulSoup(ir.content)\n",
    "            tem = get_value(soup)\n",
    "            ans.extend(tem)\n",
    "            print(\"get page {}\".format(i))\n",
    "        finally:\n",
    "            time.sleep(0.02)\n",
    "    save_txt(Code_num + \".txt\", ans)\n",
    "    print(\"下载任务结束\")\n",
    "    return\n",
    "\n",
    "\n",
    "# read txt and transfomer to pd\n",
    "def read_data(name, begin=0):\n",
    "    raw_data = pd.read_csv(\n",
    "        name, delim_whitespace=True, names=[\"date\", \"value\", \"avalue\", \"increase\"]\n",
    "    )\n",
    "    raw_data = raw_data.drop([\"avalue\", \"increase\"], 1)\n",
    "\n",
    "    # data['date']=pd.to_datetime(data['date'])\n",
    "    # raw_data=raw_data.sort_values('date')\n",
    "    # raw_data.index=range(len(raw_data))\n",
    "\n",
    "    raw_data = raw_data[begin:-1]\n",
    "    raw_data.index = range(len(raw_data))\n",
    "    return raw_data\n",
    "\n",
    "\n",
    "# reverse the dataframe\n",
    "def reverse_data(raw_data):\n",
    "    raw_data[\"date\"] = pd.to_datetime(raw_data[\"date\"])\n",
    "    data = raw_data.sort_values(\"date\")\n",
    "    data.index = range(len(raw_data))\n",
    "    return data\n",
    "\n",
    "\n",
    "# get fund name from code\n",
    "# para = name return name para=gsz return new value\n",
    "def get_name_new(code, para):\n",
    "    base = \"http://fundgz.1234567.com.cn/js/\"\n",
    "    # jsonpgz({\"fundcode\":\"162411\",\"name\":\"华宝标普油气上游股票\",\n",
    "    # \"jzrq\":\"2019-05-10\",\"dwjz\":\"0.5060\",\"gsz\":\"0.4946\",\"gszzl\"\n",
    "    #:\"-2.24\",\"gztime\":\"2019-05-14 04:00\"})\n",
    "    url = base + str(code) + \".js\"\n",
    "    try:\n",
    "        i = requests.get(url)\n",
    "        sub = '\"%s\":\"' % (para)\n",
    "        #print(i.text)\n",
    "        name = url_info(i.text, sub)\n",
    "    except Exception as e:\n",
    "        #print(e)\n",
    "        return \"No Name\"\n",
    "    finally:\n",
    "        i.close()\n",
    "\n",
    "    return name[:-1]\n",
    "\n",
    "\n",
    "# get file last modify date\n",
    "def file_mdate(name):\n",
    "    st = os.stat(name)\n",
    "    mtime=st.st_mtime\n",
    "    tl=time.localtime(mtime)\n",
    "    return time.strftime(\"%Y-%m-%d\",tl)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#%%prun\n",
    " #get_ipython().run_cell_magic('prun', '', \"#downloading fund data\\n\")\n",
    "\n",
    "#fun_main('162411')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-05-13</td>\n",
       "      <td>0.490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-05-10</td>\n",
       "      <td>0.506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-05-09</td>\n",
       "      <td>0.503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-05-08</td>\n",
       "      <td>0.503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-05-07</td>\n",
       "      <td>0.499</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  value\n",
       "0  2019-05-13  0.490\n",
       "1  2019-05-10  0.506\n",
       "2  2019-05-09  0.503\n",
       "3  2019-05-08  0.503\n",
       "4  2019-05-07  0.499"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "file_name = os.getcwd() + \"\\\\data\\\\162411.txt\"\n",
    "data = read_data(file_name, 0)\n",
    "data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the percentage is -5.100%\n",
      "buy at price 0.949 at date 2011-12-19 00:00:00\n",
      "\n",
      "the percentage is -10.500%\n",
      "buy at price 0.895 at date 2012-05-14 00:00:00\n",
      "\n",
      "the percentage is -15.400%\n",
      "buy at price 0.846 at date 2012-05-18 00:00:00\n",
      "\n",
      "sell at price 1.037 at date 2012-09-14 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -1.653\n",
      "sell at price 1.08 at date 2013-08-01 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -0.573\n",
      "sell at price 1.139 at date 2013-10-11 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " 0.5660000000000003\n",
      "the percentage is -10.100%\n",
      "buy at price 0.899 at date 2014-10-13 00:00:00\n",
      "\n",
      "the percentage is -11.500%\n",
      "buy at price 0.885 at date 2014-10-14 00:00:00\n",
      "\n",
      "the percentage is -17.800%\n",
      "buy at price 0.822 at date 2014-11-28 00:00:00\n",
      "\n",
      "the percentage is -20.300%\n",
      "buy at price 0.797 at date 2014-12-04 00:00:00\n",
      "\n",
      "the percentage is -27.000%\n",
      "buy at price 0.73 at date 2014-12-08 00:00:00\n",
      "\n",
      "the percentage is -30.600%\n",
      "buy at price 0.694 at date 2014-12-15 00:00:00\n",
      "\n",
      "sell at price 0.837 at date 2015-04-15 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -3.4240000000000004\n",
      "the percentage is -31.500%\n",
      "buy at price 0.685 at date 2015-07-01 00:00:00\n",
      "\n",
      "the percentage is -36.100%\n",
      "buy at price 0.639 at date 2015-07-17 00:00:00\n",
      "\n",
      "the percentage is -40.800%\n",
      "buy at price 0.592 at date 2015-07-24 00:00:00\n",
      "\n",
      "the percentage is -46.500%\n",
      "buy at price 0.535 at date 2015-08-24 00:00:00\n",
      "\n",
      "sell at price 0.646 at date 2015-10-08 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -5.229\n",
      "the percentage is -48.300%\n",
      "buy at price 0.517 at date 2015-12-07 00:00:00\n",
      "\n",
      "the percentage is -50.100%\n",
      "buy at price 0.499 at date 2015-12-14 00:00:00\n",
      "\n",
      "the percentage is -55.900%\n",
      "buy at price 0.441 at date 2016-01-11 00:00:00\n",
      "\n",
      "the percentage is -60.100%\n",
      "buy at price 0.399 at date 2016-01-19 00:00:00\n",
      "\n",
      "sell at price 0.493 at date 2016-03-07 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -6.592000000000001\n",
      "sell at price 0.544 at date 2016-04-12 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -6.048000000000002\n",
      "sell at price 0.601 at date 2016-04-27 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -5.447000000000002\n",
      "sell at price 0.627 at date 2016-08-18 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -4.820000000000002\n",
      "sell at price 0.715 at date 2016-11-30 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -4.105000000000002\n",
      "the percentage is -40.000%\n",
      "buy at price 0.6 at date 2017-04-19 00:00:00\n",
      "\n",
      "the percentage is -45.200%\n",
      "buy at price 0.548 at date 2017-06-05 00:00:00\n",
      "\n",
      "the percentage is -50.400%\n",
      "buy at price 0.496 at date 2017-08-16 00:00:00\n",
      "\n",
      "sell at price 0.607 at date 2017-11-06 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -5.142000000000003\n",
      "sell at price 0.664 at date 2018-05-16 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -4.478000000000003\n",
      "sell at price 0.729 at date 2018-07-09 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -3.749000000000004\n",
      "the percentage is -40.200%\n",
      "buy at price 0.598 at date 2018-10-29 00:00:00\n",
      "\n",
      "the percentage is -45.600%\n",
      "buy at price 0.544 at date 2018-12-06 00:00:00\n",
      "\n",
      "the percentage is -51.000%\n",
      "buy at price 0.49 at date 2018-12-17 00:00:00\n",
      "\n",
      "the percentage is -55.700%\n",
      "buy at price 0.443 at date 2018-12-21 00:00:00\n",
      "\n",
      "sell at price 0.536 at date 2019-01-18 00:00:00\n",
      "\n",
      "\n",
      "\n",
      "earn money is \n",
      " -5.288000000000006\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "data = reverse_data(data)\n",
    "base = data.iloc[0, 1]\n",
    "len_data = len(data)\n",
    "\n",
    "grid = -0.05\n",
    "buy_value = []\n",
    "\n",
    "bt = 0\n",
    "st = bt\n",
    "\n",
    "cost = 0\n",
    "earn = cost\n",
    "\n",
    "buy_x = []\n",
    "sell_x = []\n",
    "\n",
    "for i in range(0, len_data):\n",
    "    now = data.iloc[i, 1]\n",
    "\n",
    "    if (now - base) / base < grid:\n",
    "        print(\"the percentage is {:.3f}%\".format(100 * (now - base) / base))\n",
    "        print(\"buy at price {} at date {}\\n\".format(now, data.iloc[i, 0]))\n",
    "        grid -= 0.05\n",
    "        buy_value.append(now)\n",
    "        bt += 1\n",
    "        cost += now\n",
    "        buy_x.append(i)\n",
    "\n",
    "    elif buy_value and (now - buy_value[-1]) / buy_value[-1] > 0.20:\n",
    "        print(\"sell at price {} at date {}\\n\".format(now, data.iloc[i, 0]))\n",
    "        grid += 0.05\n",
    "        earn += now\n",
    "        buy_value.pop()\n",
    "        st += 1\n",
    "        print(\"\\n\\nearn money is \\n\", earn - cost)\n",
    "        sell_x.append(i)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Begin 2011-09-30 00:00:00  End at 2019-05-13 00:00:00\n",
      "\n",
      "Buy 24 Sell 14\n",
      "Cost is $15.543000000000003 Earn is $10.2550 Profit is $-5.2880\n",
      "Still 10 fund not sell Store value is $4.900\n",
      "Total Profit is $-0.388\n",
      "Percentage : -2.4963%\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "begin_date = data.iloc[0, 0]\n",
    "end_date = data.iloc[len(data) - 1, 0]\n",
    "print(\"Begin {}  End at {}\".format(begin_date, end_date))\n",
    "print(\"\")\n",
    "print(\"Buy {} Sell {}\".format(bt, st))\n",
    "print(\"Cost is ${} Earn is ${:.4f} Profit is ${:.4f}\".format(cost, earn, earn - cost))\n",
    "\n",
    "store_value = 0\n",
    "\n",
    "last_value = data.iloc[len(data) - 1, 1]\n",
    "for i in buy_value:\n",
    "    store_value += 1\n",
    "\n",
    "print(\n",
    "    \"Still {} fund not sell Store value is ${:.3f}\".format(\n",
    "        store_value, store_value * last_value\n",
    "    )\n",
    ")\n",
    "total_profit = store_value * last_value + earn - cost\n",
    "print(\"Total Profit is ${:.3f}\".format(total_profit))\n",
    "\n",
    "print(\"Percentage : {:3.4f}%\".format(100 * total_profit / cost))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.2;0.775x0.68)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 837x815.4 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.close(\"all\")\n",
    "plt.figure()\n",
    "plt.style.use(\"ggplot\")\n",
    "# sort_columns=True,\n",
    "x = data.plot(\n",
    "    x=\"date\",\n",
    "    y=\"value\",\n",
    "    color=\"burlywood\",\n",
    "    sort_columns=True,\n",
    "    figsize=[7.75 * 1.5, 1.5 * 7.55],\n",
    ")\n",
    "plt.scatter(data.iloc[buy_x, 0], data.iloc[buy_x, 1], marker=\"o\", color=\"r\")\n",
    "plt.scatter(data.iloc[sell_x, 0], data.iloc[sell_x, 1], marker=\"o\", color=\"g\")\n",
    "plt.rcParams[\"font.sans-serif\"] = [\"SimHei\"]  # 用来正常显示中文标签\n",
    "plt.rcParams[\"axes.unicode_minus\"] = False  # 用来正常显示负号\n",
    "plt.title(get_name_new(162411, \"name\") + \" 162411\")\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read(file):\n",
    "    raw_data = pd.read_csv(\n",
    "        file,\n",
    "        delim_whitespace=True,\n",
    "        names=[\"fund\", \"share\", \"cost\"],\n",
    "        dtype={\"fund\": str},\n",
    "    )\n",
    "    return raw_data\n",
    "\n",
    "def lost(cost, value, share):\n",
    "    return (value - cost) * share"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-05-16 21:59         162411  华宝标普油气上游股        -9.0593  -2.1022%\n",
      "2019-05-16 15:00         100038  富国沪深300指数增       -1.9907  -1.7616%\n",
      "2019-05-16 15:00         161017  富国中证50           -8.8789  -6.2918%\n",
      "2019-05-16 15:00         100032  富国中证红利指数增        -4.4732  -4.6890%\n",
      "2019-05-16 15:00         004752  广发中证传媒ETF联接      -9.7546  -6.9554%\n",
      "2019-05-16 15:00         003765  广发创业板ETF联接       -3.7006  -7.9931%\n",
      "2019-05-16 15:00         000968  广发养老指数           -1.3676  -7.3396%\n",
      "2019-05-16 15:00         001180  广发医药卫生联接         9.0808  6.0909%\n",
      "substring not found\n",
      "No Value                 000614  No Name          10153.0012  98.9282%\n",
      "2019-05-16 21:57         000216  华安黄金易ETF联接       0.6340  0.3326%\n"
     ]
    }
   ],
   "source": [
    "name = os.getcwd() + \"\\\\trade\\\\fund-cost.txt\"\n",
    "fund = read(name)\n",
    "for index, row in fund.iterrows():\n",
    "    fund_code = str(row[\"fund\"])\n",
    "    fund_name = os.getcwd() + \"\\\\data\\\\\" + fund_code + \".txt\"\n",
    "    tem = os.path.isfile(fund_name)\n",
    "    today = time.strftime(\"%Y-%m-%d\")\n",
    "\n",
    "\n",
    "    if tem == False:\n",
    "        fun_main(fund_code)\n",
    "        print(\"down \", fund_name, os.path.isfile(fund_name))\n",
    "    \"\"\"\n",
    "        if today != file_mdate(fund_name):\n",
    "        open(fund_name, \"w\").close()\n",
    "        fun_main(fund_code)\n",
    "        print(\"update \", fund_name)\n",
    "    \"\"\"\n",
    "\n",
    "\n",
    "    # read first row of data\n",
    "    \"\"\"\n",
    "    tem = pd.read_csv(\n",
    "        fund_name,\n",
    "        names=[\"date\", \"value\", \"rvalue\", \"change\"],\n",
    "        delim_whitespace=True,\n",
    "        nrows=1,\n",
    "    )\n",
    "    date = tem.iloc[0, 0]\n",
    "    value = float(tem.iloc[0, 1])\n",
    "    \"\"\"\n",
    "    value,date=update_value(fund_code)\n",
    "    value=float(value)\n",
    "    # read cost and share from trade/fund-cost.txt\n",
    "    share = float(row[\"share\"])\n",
    "    cost = float(row[\"cost\"])\n",
    "    change = (value - cost) / value\n",
    "    # print(share,cost,value)\n",
    "    print(\n",
    "        \"{:25}{:8}{:<16} {:4.4f}  {:4.4%}\".format(\n",
    "            date,\n",
    "            fund_code,\n",
    "            get_name_new(fund_code, \"name\"),\n",
    "            lost(cost, value, share),\n",
    "            change,\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def update_value(code):\n",
    "    \"\"\"\n",
    "    Enter fund code\n",
    "    return value and its time \n",
    "    get realtime value from base api \n",
    "    some fund may return none\n",
    "    \"\"\"\n",
    "    api = \"http://fundgz.1234567.com.cn/js/\"\n",
    "    # jsonpgz({\"fundcode\":\"162411\",\"name\":\"华宝标普油气上游股票\",\n",
    "    # \"jzrq\":\"2019-05-10\",\"dwjz\":\"0.5060\",\"gsz\":\"0.4946\",\"gszzl\"\n",
    "    #:\"-2.24\",\"gztime\":\"2019-05-14 04:00\"})\n",
    "    url = api + str(code) + \".js\"\n",
    "    gsz=\"gsz\"\n",
    "    gztime=\"gztime\"\n",
    "    base= '\\\"%s\\\":\\\"' \n",
    "    try:\n",
    "        i = requests.get(url)\n",
    "        sub = base % (gsz)\n",
    "        name = find_str(i.text,sub,\"\\\"\")\n",
    "        sub= base % (gztime)\n",
    "        time= find_str(i.text,sub,\"\\\"\")\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "        return 100,\"No Value\"\n",
    "    finally:\n",
    "        i.close()\n",
    "\n",
    "    return name,time\n",
    "\n",
    "def find_str(src,beginsrc,endsrc):\n",
    "    \"\"\"\n",
    "    src beginsrc endsrc\n",
    "    \"\"\"\n",
    "    begin=src.index(beginsrc)+len(beginsrc)\n",
    "    end=src.index(endsrc,begin)\n",
    "    return src[begin:end]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_fund_name(code):\n",
    "    filename=\".\\\\data\\\\funds_name.txt\"\n",
    "    with open(filename,'r') as file:\n",
    "        for line in file:\n",
    "            if line[0]==str(code):\n",
    "                return line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " "
     ]
    }
   ],
   "source": [
    "%%prun\n",
    "#get_fund_name(\"000614\")\n",
    "code=\"960042\"\n",
    "filename=\".\\\\data\\\\funds_name.txt\"\n",
    "with open(filename,'r') as file:\n",
    "    for line in file:\n",
    "        if line[0]==str(code):\n",
    "            print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "file_extension": ".py",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
